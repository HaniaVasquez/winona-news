import type {  ContentfulPost,  ContentfulRawPostFields,  ContentfulResponse,} from '~/types/contentful'import { createContentfulRenderer } from '../../utils/contentfulRenderer'export default defineEventHandler(async event => {  const slug = (event.context?.params as any)?.slug as string | undefined  const config = useRuntimeConfig()  if (!slug) {    throw createError({ statusCode: 400, message: 'Missing slug parameter' })  }  if (!config.CONTENTFUL_SPACE_ID || !config.CONTENTFUL_DELIVERY_TOKEN) {    throw createError({      statusCode: 500,      message: 'Missing Contentful environment variables',    })  }  const url = `https://cdn.contentful.com/spaces/${config.CONTENTFUL_SPACE_ID}/environments/${config.CONTENTFUL_ENVIRONMENT || 'master'}/entries`  const res = await $fetch<ContentfulResponse<ContentfulRawPostFields>>(url, {    params: {      access_token: config.CONTENTFUL_DELIVERY_TOKEN,      content_type: 'pageBlogPost',      'fields.slug': slug,      include: 10,    },  }).catch((err: any) => {    throw createError({      statusCode: err?.statusCode || 500,      message: err?.message || 'Failed to fetch from Contentful',    })  })  if (!res.items?.length) {    throw createError({ statusCode: 404, message: `Post not found for slug: ${slug}` })  }  const item = res.items[0]  const assets = (res.includes?.Asset ?? []).filter(Boolean)  const entries = (res.includes?.Entry ?? []).filter(Boolean)  const assetMap = new Map<string, any>(    assets.map((a): [string, any] => [a?.sys?.id ?? '', a]).filter(([k]) => !!k) as [string, any][]  )  const entryMap = new Map<string, any>(    entries.map((e): [string, any] => [e?.sys?.id ?? '', e]).filter(([k]) => !!k) as [string, any][]  )  const resolveAsset = (maybe: any) => {    if (!maybe) return undefined    if (typeof maybe === 'string') return assetMap.get(maybe)    if (maybe?.sys?.id) return assetMap.get(maybe.sys.id) ?? maybe    if (maybe?.fields?.file) return maybe    return undefined  }  const resolveEntry = (maybe: any) => {    if (!maybe) return undefined    if (typeof maybe === 'string') return entryMap.get(maybe)    if (maybe?.sys?.id) return entryMap.get(maybe.sys.id) ?? maybe    return maybe  }  const assetUrl = (asset: any) => {    const rawUrl = asset?.fields?.file?.url    return rawUrl ? (rawUrl.startsWith('//') ? `https:${rawUrl}` : rawUrl) : undefined  }  const assetTitle = (asset: any) => asset?.fields?.title ?? ''  let image: string | null = null  const imageField =    item.fields?.articleImage ??    item.fields?.featuredImage ??    item.fields?.coverImage ??    item.fields?.image  const candidateAsset = resolveAsset(    (imageField as any)?.sys?.id ? { sys: { id: (imageField as any).sys.id } } : imageField  )  const imageUrl = candidateAsset ? assetUrl(candidateAsset) : undefined  if (imageUrl) image = imageUrl  const escapeAttr = (s: string) =>    String(s ?? '')      .replace(/&/g, '&amp;')      .replace(/"/g, '&quot;')      .replace(/</g, '&lt;')      .replace(/>/g, '&gt;')  const renderHtml = createContentfulRenderer({ resolveAsset, resolveEntry, assetUrl, escapeAttr })  const rawContent = item.fields?.content  const contentHtml =    item.fields?.content && item.fields.content.nodeType      ? renderHtml(item.fields.content)      : (item.fields?.content ?? '')  let author: ContentfulPost['author'] = null  const authorField = item.fields?.author  const authorEntry = resolveEntry(    (authorField as any)?.sys?.id ? { sys: { id: (authorField as any).sys.id } } : authorField  )  if (authorEntry) {    const avatarAsset = resolveAsset(      authorEntry?.fields?.avatar ?? authorEntry?.fields?.image ?? null    )    const avatar = avatarAsset ? (assetUrl(avatarAsset) ?? null) : null    author = {      id: authorEntry?.sys?.id ?? '',      name: authorEntry?.fields?.name ?? authorEntry?.fields?.title ?? '',      slug: authorEntry?.fields?.slug ?? '',      avatar,    }  }  const relatedCandidates = item.fields?.relatedBlogPosts ?? []  const related: ContentfulPost['related'] = []  if (Array.isArray(relatedCandidates)) {    for (const r of relatedCandidates) {      const relEntry = resolveEntry((r as any)?.sys?.id ? { sys: { id: (r as any).sys.id } } : r)      if (!relEntry) continue      const relImageCandidate = resolveAsset(        relEntry?.fields?.articleImage ??          relEntry?.fields?.featuredImage ??          relEntry?.fields?.coverImage ??          relEntry?.fields?.image      )      const relImage = relImageCandidate ? (assetUrl(relImageCandidate) ?? null) : null      related.push({        id: relEntry?.sys?.id ?? '',        title: relEntry?.fields?.title ?? '',        slug: relEntry?.fields?.slug ?? '',        image: relImage,        date: relEntry?.fields?.publishedDate ?? relEntry?.sys?.createdAt ?? '',      })    }  }  const post: ContentfulPost = {    id: item?.sys?.id ?? '',    title: item?.fields?.title ?? '',    slug: item?.fields?.slug ?? slug,    type: item?.sys?.contentType?.sys?.id ?? '',    description:      item?.fields?.description ?? item?.fields?.excerpt ?? item?.fields?.shortDescription ?? '',    image: image ?? undefined,    date: item?.fields?.publishedDate ?? item?.sys?.createdAt ?? '',    contentHtml,    contentRaw: item.fields.content ?? null,    author,    related,  }  return post})