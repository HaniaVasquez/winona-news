import { documentToHtmlString } from '@contentful/rich-text-html-renderer'import { BLOCKS, INLINES } from '@contentful/rich-text-types'export function createContentfulRenderer({ resolveAsset, resolveEntry, assetUrl, escapeAttr }: any) {  const handleEmbeddedAsset = (node: any, asBlock = true) => {    const asset = resolveAsset(node?.data?.target?.sys?.id) ?? resolveAsset(node?.data?.target)    const url = assetUrl(asset)    if (!url) return ''    const alt = escapeAttr(asset?.fields?.title || '')    if (asBlock) {      return `<figure class="rich-figure" style="margin: 2rem auto; text-align: center; max-width: 80%;">    <img class="rich-image" src="${escapeAttr(url)}" alt="${alt}" loading="lazy"      style="border-radius: 12px; width: 100%; height: auto; box-shadow: 0 4px 12px rgba(0,0,0,0.08); margin-bottom: 0.5rem;" />    <figcaption class="rich-caption" style="font-size: 0.875rem; font-style: italic; color: #6b7280;">${alt}</figcaption>  </figure>`    }    return `<img class="rich-inline" src="${escapeAttr(url)}" alt="${alt}" loading="lazy"/>`  }  const handleEmbeddedEntry = (node: any, asInline = false) => {    const entry = resolveEntry(node?.data?.target?.sys?.id) ?? node?.data?.target    const type = entry?.sys?.contentType?.sys?.id    if (type === 'componentRichImage' || type === 'richImage') {      const imageAsset = resolveAsset(entry?.fields?.image ?? entry?.fields?.asset)      const url = assetUrl(imageAsset)      const caption = entry?.fields?.caption || entry?.fields?.title || ''      if (!url) return ''      if (asInline) {        return `<img class="rich-inline" src="${escapeAttr(url)}" alt="${escapeAttr(caption)}" loading="lazy"/>`      }      return `<figure class="rich-figure" style="margin: 2rem auto; text-align: center; max-width: 80%;">    <img class="rich-image" src="${escapeAttr(url)}" alt="${escapeAttr(caption)}" loading="lazy"      style="border-radius: 12px; width: 100%; height: auto; box-shadow: 0 4px 12px rgba(0,0,0,0.08); margin-bottom: 0.5rem;" />    <figcaption class="rich-caption" style="font-size: 0.875rem; font-style: italic; color: #6b7280;">${escapeAttr(caption)}</figcaption>  </figure>`    }    const title = entry?.fields?.title ?? entry?.fields?.name ?? ''    const excerpt = entry?.fields?.description ?? ''    if (asInline) return `<strong>${escapeAttr(title)}</strong>`    return `<div class="embedded-entry"><strong>${escapeAttr(title)}</strong><p>${escapeAttr(excerpt)}</p></div>`  }  const renderNode = {    [BLOCKS.EMBEDDED_ASSET]: (node: any) => handleEmbeddedAsset(node, true),    [BLOCKS.EMBEDDED_ENTRY]: (node: any) => handleEmbeddedEntry(node, false),    [INLINES.ASSET_HYPERLINK]: (node: any) => handleEmbeddedAsset(node, false),    [INLINES.ENTRY_HYPERLINK]: (node: any) => handleEmbeddedEntry(node, true),    [INLINES.EMBEDDED_ENTRY]: (node: any) => handleEmbeddedEntry(node, true),    [INLINES.HYPERLINK]: (node: any, next: any) => {      const uri = node?.data?.uri ?? ''      const text = next(node.content ?? [])      return `<a href="${escapeAttr(uri)}" target="_blank" rel="noopener noreferrer">${text}</a>`    },  }  return (doc: any) => {    const html = documentToHtmlString(doc, { renderNode })    return html.replace(/<script[\s\S]*?>[\s\S]*?<\/script>/gi, '')  }}